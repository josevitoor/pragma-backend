using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Services;
using Domain.Entities;
using Domain.DTO.{{ entity_name }};
using AutoMapper;

namespace Application.Controllers;
/// <summary>
/// Controller para gerenciamento de {{ entity_name }}
/// </summary>
[ApiController]
[ApiVersion("1.0")]
[Route("v{version:apiVersion}/[controller]")]
[AuthorizeTCE]
public class {{ entity_name }}Controller : ControllerBase
{
    private readonly IMapper _mapper;
    private readonly I{{ entity_name }}Service _service;

    /// <summary>
    /// Construtor do Controller de {{ entity_name }}
    /// </summary>
    public {{ entity_name }}Controller(IMapper mapper, I{{ entity_name }}Service service)
    {
        _mapper = mapper;
        _service = service;
    }

    /// <summary>
    /// Buscar todos os registros de {{ entity_name }}
    /// </summary>
    /// <response code="200">Sucesso</response>
    /// <response code="401">Não autorizado</response>
    /// <response code="500">Erro interno do servidor</response>
    [HttpGet]
    [ProducesResponseType(typeof(IEnumerable<{{ entity_name }}Get>), 200)]
    public async Task<IActionResult> GetAllAsync()
    {
        IEnumerable<{{ entity_name }}> {{ var_entity_name }}s = await _service.GetAllAsync();
        IEnumerable<{{ entity_name }}Get> result = _mapper.Map<IEnumerable<{{ entity_name }}Get>>({{ var_entity_name }}s);
        return Ok(result);
    }

    /// <summary>
    /// Buscar registro de {{ entity_name }} por ID
    /// </summary>
    /// <param name="id">ID do registro</param>
    /// <response code="200">Sucesso</response>
    /// <response code="401">Não autorizado</response>
    /// <response code="404">Não encontrado</response>
    /// <response code="500">Erro interno do servidor</response>
    [HttpGet("{id}")]
    [ProducesResponseType(typeof({{ entity_name }}GetById), 200)]
    public async Task<IActionResult> GetByIdAsync([FromRoute] int id)
    {
        {{ entity_name }} {{ var_entity_name }} = await _service.GetByIdAsync(id);
        if ({{ var_entity_name }} == null)
            return NotFound();

        {{ entity_name }}GetById result = _mapper.Map<{{ entity_name }}GetById>({{ var_entity_name }});
        return Ok(result);
    }

    /// <summary>
    /// Criar novo registro de {{ entity_name }}
    /// </summary>
    /// <param name="dto">Dados para criação</param>
    /// <response code="201">Criado com sucesso</response>
    /// <response code="400">Dados inválidos</response>
    /// <response code="401">Não autorizado</response>
    /// <response code="500">Erro interno do servidor</response>
    [HttpPost]
    [ProducesResponseType(typeof({{ entity_name }}), 201)]
    public async Task<IActionResult> CreateAsync([FromBody] {{ entity_name }}Post dto)
    {
        {{ entity_name }} {{ var_entity_name }} = _mapper.Map<{{ entity_name }}>(dto);
        {{ entity_name }} result = await _service.AddAsync({{ var_entity_name }});
        return StatusCode(201, result);
    }

    /// <summary>
    /// Atualizar registro de {{ entity_name }} por ID
    /// </summary>
    /// <param name="id">ID do registro</param>
    /// <param name="dto">Dados para atualização</param>
    /// <response code="200">Atualizado com sucesso</response>
    /// <response code="401">Não autorizado</response>
    /// <response code="404">Registro não encontrado</response>
    /// <response code="500">Erro interno do servidor</response>
    [HttpPut("{id}")]
    [ProducesResponseType(typeof({{ entity_name }}), 200)]
    public async Task<IActionResult> UpdateAsync([FromRoute] int id, [FromBody] {{ entity_name }}Post dto)
    {
       {{ entity_name }} {{ var_entity_name }} = await _service.GetByIdAsync(id);
        if ({{ var_entity_name }} == null)
            return NotFound();

        {{ entity_name }} {{ var_entity_name }}Update = _mapper.Map(dto, {{ var_entity_name }});
        var result = await _service.UpdateAsync({{ var_entity_name }}Update);
        return Ok(result);
    }

    /// <summary>
    /// Excluir registro de {{ entity_name }} por ID
    /// </summary>
    /// <param name="id">ID do registro</param>
    /// <response code="204">Excluído com sucesso</response>
    /// <response code="401">Não autorizado</response>
    /// <response code="404">Registro não encontrado</response>
    /// <response code="500">Erro interno do servidor</response>
    [HttpDelete("{id}")]
    [ProducesResponseType(204)]
    public async Task<IActionResult> DeleteAsync([FromRoute] int id)
    {
        {{ entity_name  }} {{ var_entity_name }} = await _service.GetByIdAsync(id);
        if ({{ entity_name  }} == null)
            return NotFound();

        await _service.DeleteAsync({{ var_entity_name }});
        return NoContent();
    }
}