using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Services;
using Domain.Entities;
using Domain.DTO.Response;
using Domain.DTO.Request;
using AutoMapper;
using TceCore.ACL;
{{~ if table_columns_filter_list && table_columns_filter_list.size > 0 ~}}
using Domain.Filter;
{{~ end ~}}
{{~ if is_server_side && has_tce_base ~}}
using TCE.Base.Repository._BaseRepository.Paging;
using Application.ApiPagination;
{{~ end ~}}
{{~ if is_server_side && !has_tce_base ~}}
using {{ import_paginate }};
using Application.ApiPagination;
{{~ end ~}}

namespace Application.Controllers;
/* 
 * Arquivo gerado automaticamente pelo PRAGMA.
 * Este código pode ser ajustado ou expandido de acordo com suas necessidades.
 */
 
/// <summary>
/// Controller para gerenciamento de {{ entity_label }}
/// </summary>
[ApiController]
[Route("[controller]")]
[AuthorizeTCE]
public class {{ entity_name }}Controller : ControllerBase
{
    {{~ if has_tce_base ~}}
    private readonly IMapper _mapper;
    {{~ end ~}}
    private readonly I{{ entity_name }}Service _service;

    /// <summary>
    /// Construtor do Controller de {{ entity_label }}
    /// </summary>
    public {{ entity_name }}Controller({{ if has_tce_base }}IMapper mapper, {{ end }}I{{ entity_name }}Service service)
    {
        {{~ if has_tce_base ~}}
        _mapper = mapper;
        {{~ end ~}}
        _service = service;
    }

    /// <summary>
    /// Buscar todos os registros de {{ entity_label }}
    /// </summary>
    /// <response code="200">Sucesso</response>
    /// <response code="401">Não autorizado</response>
    /// <response code="500">Erro interno do servidor</response>
    [HttpGet]
    [ProducesResponseType(typeof({{ if is_server_side }}IPaginate<{{ entity_name }}{{ else }}IEnumerable<{{ entity_name }}{{ end }}Get>), 200)]
    public async Task<IActionResult> GetAllAsync({{ if table_columns_filter_list && table_columns_filter_list.size > 0 }}[FromQuery] {{ entity_name }}Filter filter{{ end }})
    {
        {{ if is_server_side }}IPaginate<{{ entity_name }}>{{ else }}IEnumerable<{{ entity_name }}>{{ end }} {{ entity_name | string.slice(0, 1) | string.downcase }}{{ entity_name | string.slice(1) }}s = await _service.GetAllAsync({{ if table_columns_filter_list && table_columns_filter_list.size > 0 }}filter{{ end }});
        {{ if is_server_side }}IPaginate<{{ entity_name }}Get>{{ else }}IEnumerable<{{ entity_name }}Get>{{ end }} result = {{ if has_tce_base }}_mapper{{ else }}Mapper{{ end }}.Map<{{ if is_server_side }}IPaginate<{{ entity_name }}Get>{{ else }}IEnumerable<{{ entity_name }}Get>{{ end }}>({{ entity_name | string.slice(0, 1) | string.downcase }}{{ entity_name | string.slice(1) }}s);
        {{ if is_server_side }}return Pagination.Page(result);{{ else }}return Ok(result);{{ end }}
    }

    /// <summary>
    /// Buscar registro de {{ entity_label }} por ID
    /// </summary>
    /// <param name="id">ID do registro</param>
    /// <response code="200">Sucesso</response>
    /// <response code="401">Não autorizado</response>
    /// <response code="404">Não encontrado</response>
    /// <response code="500">Erro interno do servidor</response>
    [HttpGet("{id}")]
    [ProducesResponseType(typeof({{ entity_name }}Get), 200)]
    public async Task<IActionResult> GetByIdAsync([FromRoute] int id)
    {
        {{ entity_name }} {{ entity_name | string.slice(0, 1) | string.downcase }}{{ entity_name | string.slice(1) }} = await _service.GetByIdAsync(id);
        if ({{ entity_name | string.slice(0, 1) | string.downcase }}{{ entity_name | string.slice(1) }} == null)
            return NotFound();

        {{ entity_name }}Get result = {{ if has_tce_base }}_mapper{{ else }}Mapper{{ end }}.Map<{{ entity_name }}Get>({{ entity_name | string.slice(0, 1) | string.downcase }}{{ entity_name | string.slice(1) }});
        return Ok(result);
    }

    /// <summary>
    /// Criar novo registro de {{ entity_label }}
    /// </summary>
    /// <param name="dto">Dados para criação</param>
    /// <response code="201">Criado com sucesso</response>
    /// <response code="400">Dados inválidos</response>
    /// <response code="401">Não autorizado</response>
    /// <response code="500">Erro interno do servidor</response>
    [HttpPost]
    [ProducesResponseType(typeof({{ entity_name }}), 201)]
    public IActionResult Create([FromBody] {{ entity_name }}Post dto)
    {
        {{ entity_name }} {{ entity_name | string.slice(0, 1) | string.downcase }}{{ entity_name | string.slice(1) }} = {{ if has_tce_base }}_mapper{{ else }}Mapper{{ end }}.Map<{{ entity_name }}>(dto);
        {{ entity_name }} result = _service.Add({{ entity_name | string.slice(0, 1) | string.downcase }}{{ entity_name | string.slice(1) }});
        return StatusCode(201, result);
    }

    /// <summary>
    /// Atualizar registro de {{ entity_label }} por ID
    /// </summary>
    /// <param name="id">ID do registro</param>
    /// <param name="dto">Dados para atualização</param>
    /// <response code="200">Atualizado com sucesso</response>
    /// <response code="401">Não autorizado</response>
    /// <response code="404">Registro não encontrado</response>
    /// <response code="500">Erro interno do servidor</response>
    [HttpPut("{id}")]
    [ProducesResponseType(typeof({{ entity_name }}), 200)]
    public async Task<IActionResult> Update([FromRoute] int id, [FromBody] {{ entity_name }}Post dto)
    {
       {{ entity_name }} {{ entity_name | string.slice(0, 1) | string.downcase }}{{ entity_name | string.slice(1) }} = await _service.GetByIdAsync(id);
        if ({{ entity_name | string.slice(0, 1) | string.downcase }}{{ entity_name | string.slice(1) }} == null)
            return NotFound();

        {{ entity_name }} {{ entity_name | string.slice(0, 1) | string.downcase }}{{ entity_name | string.slice(1) }}Update = {{ if has_tce_base }}_mapper{{ else }}Mapper{{ end }}.Map(dto, {{ entity_name | string.slice(0, 1) | string.downcase }}{{ entity_name | string.slice(1) }});
        var result = _service.Update({{ entity_name | string.slice(0, 1) | string.downcase }}{{ entity_name | string.slice(1) }}Update);
        return Ok(result);
    }

    /// <summary>
    /// Excluir registro de {{ entity_label }} por ID
    /// </summary>
    /// <param name="id">ID do registro</param>
    /// <response code="204">Excluído com sucesso</response>
    /// <response code="401">Não autorizado</response>
    /// <response code="404">Registro não encontrado</response>
    /// <response code="500">Erro interno do servidor</response>
    [HttpDelete("{id}")]
    [ProducesResponseType(204)]
    public async Task<IActionResult> Delete([FromRoute] int id)
    {
        {{ entity_name  }} {{ entity_name | string.slice(0, 1) | string.downcase }}{{ entity_name | string.slice(1) }} = await _service.GetByIdAsync(id);
        if ({{ entity_name | string.slice(0, 1) | string.downcase }}{{ entity_name | string.slice(1) }} == null)
            return NotFound();

        _service.Delete({{ entity_name | string.slice(0, 1) | string.downcase }}{{ entity_name | string.slice(1) }});
        return NoContent();
    }
}